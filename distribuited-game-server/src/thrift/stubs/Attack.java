package thrift.stubs;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-2")
public class Attack implements org.apache.thrift.TBase<Attack, Attack._Fields>, java.io.Serializable, Cloneable, Comparable<Attack> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Attack");

  private static final org.apache.thrift.protocol.TField ATTCKER_FIELD_DESC = new org.apache.thrift.protocol.TField("attcker", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ATTACKED_FIELD_DESC = new org.apache.thrift.protocol.TField("attacked", org.apache.thrift.protocol.TType.STRING, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new AttackStandardSchemeFactory());
    schemes.put(TupleScheme.class, new AttackTupleSchemeFactory());
  }

  public String attcker; // required
  public String attacked; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ATTCKER((short)1, "attcker"),
    ATTACKED((short)2, "attacked");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ATTCKER
          return ATTCKER;
        case 2: // ATTACKED
          return ATTACKED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ATTCKER, new org.apache.thrift.meta_data.FieldMetaData("attcker", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ATTACKED, new org.apache.thrift.meta_data.FieldMetaData("attacked", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Attack.class, metaDataMap);
  }

  public Attack() {
  }

  public Attack(
    String attcker,
    String attacked)
  {
    this();
    this.attcker = attcker;
    this.attacked = attacked;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Attack(Attack other) {
    if (other.isSetAttcker()) {
      this.attcker = other.attcker;
    }
    if (other.isSetAttacked()) {
      this.attacked = other.attacked;
    }
  }

  public Attack deepCopy() {
    return new Attack(this);
  }

  @Override
  public void clear() {
    this.attcker = null;
    this.attacked = null;
  }

  public String getAttcker() {
    return this.attcker;
  }

  public Attack setAttcker(String attcker) {
    this.attcker = attcker;
    return this;
  }

  public void unsetAttcker() {
    this.attcker = null;
  }

  /** Returns true if field attcker is set (has been assigned a value) and false otherwise */
  public boolean isSetAttcker() {
    return this.attcker != null;
  }

  public void setAttckerIsSet(boolean value) {
    if (!value) {
      this.attcker = null;
    }
  }

  public String getAttacked() {
    return this.attacked;
  }

  public Attack setAttacked(String attacked) {
    this.attacked = attacked;
    return this;
  }

  public void unsetAttacked() {
    this.attacked = null;
  }

  /** Returns true if field attacked is set (has been assigned a value) and false otherwise */
  public boolean isSetAttacked() {
    return this.attacked != null;
  }

  public void setAttackedIsSet(boolean value) {
    if (!value) {
      this.attacked = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ATTCKER:
      if (value == null) {
        unsetAttcker();
      } else {
        setAttcker((String)value);
      }
      break;

    case ATTACKED:
      if (value == null) {
        unsetAttacked();
      } else {
        setAttacked((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ATTCKER:
      return getAttcker();

    case ATTACKED:
      return getAttacked();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ATTCKER:
      return isSetAttcker();
    case ATTACKED:
      return isSetAttacked();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Attack)
      return this.equals((Attack)that);
    return false;
  }

  public boolean equals(Attack that) {
    if (that == null)
      return false;

    boolean this_present_attcker = true && this.isSetAttcker();
    boolean that_present_attcker = true && that.isSetAttcker();
    if (this_present_attcker || that_present_attcker) {
      if (!(this_present_attcker && that_present_attcker))
        return false;
      if (!this.attcker.equals(that.attcker))
        return false;
    }

    boolean this_present_attacked = true && this.isSetAttacked();
    boolean that_present_attacked = true && that.isSetAttacked();
    if (this_present_attacked || that_present_attacked) {
      if (!(this_present_attacked && that_present_attacked))
        return false;
      if (!this.attacked.equals(that.attacked))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_attcker = true && (isSetAttcker());
    list.add(present_attcker);
    if (present_attcker)
      list.add(attcker);

    boolean present_attacked = true && (isSetAttacked());
    list.add(present_attacked);
    if (present_attacked)
      list.add(attacked);

    return list.hashCode();
  }

  @Override
  public int compareTo(Attack other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetAttcker()).compareTo(other.isSetAttcker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttcker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attcker, other.attcker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAttacked()).compareTo(other.isSetAttacked());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAttacked()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attacked, other.attacked);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Attack(");
    boolean first = true;

    sb.append("attcker:");
    if (this.attcker == null) {
      sb.append("null");
    } else {
      sb.append(this.attcker);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("attacked:");
    if (this.attacked == null) {
      sb.append("null");
    } else {
      sb.append(this.attacked);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AttackStandardSchemeFactory implements SchemeFactory {
    public AttackStandardScheme getScheme() {
      return new AttackStandardScheme();
    }
  }

  private static class AttackStandardScheme extends StandardScheme<Attack> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Attack struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ATTCKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attcker = iprot.readString();
              struct.setAttckerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ATTACKED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.attacked = iprot.readString();
              struct.setAttackedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Attack struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.attcker != null) {
        oprot.writeFieldBegin(ATTCKER_FIELD_DESC);
        oprot.writeString(struct.attcker);
        oprot.writeFieldEnd();
      }
      if (struct.attacked != null) {
        oprot.writeFieldBegin(ATTACKED_FIELD_DESC);
        oprot.writeString(struct.attacked);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AttackTupleSchemeFactory implements SchemeFactory {
    public AttackTupleScheme getScheme() {
      return new AttackTupleScheme();
    }
  }

  private static class AttackTupleScheme extends TupleScheme<Attack> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Attack struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetAttcker()) {
        optionals.set(0);
      }
      if (struct.isSetAttacked()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAttcker()) {
        oprot.writeString(struct.attcker);
      }
      if (struct.isSetAttacked()) {
        oprot.writeString(struct.attacked);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Attack struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.attcker = iprot.readString();
        struct.setAttckerIsSet(true);
      }
      if (incoming.get(1)) {
        struct.attacked = iprot.readString();
        struct.setAttackedIsSet(true);
      }
    }
  }

}

