#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from game import Game
from game.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  string login(string user)')
  print('  Player get_player(string user)')
  print('  bool move_self(Player player)')
  print('   update_players(i32 region)')
  print('  bool attack(Attack attack)')
  print('   update_self(string name)')
  print('  string go_to_area(i32 area, Player player)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Game.Client(protocol)
transport.open()

if cmd == 'login':
  if len(args) != 1:
    print('login requires 1 args')
    sys.exit(1)
  pp.pprint(client.login(args[0],))

elif cmd == 'get_player':
  if len(args) != 1:
    print('get_player requires 1 args')
    sys.exit(1)
  pp.pprint(client.get_player(args[0],))

elif cmd == 'move_self':
  if len(args) != 1:
    print('move_self requires 1 args')
    sys.exit(1)
  pp.pprint(client.move_self(eval(args[0]),))

elif cmd == 'update_players':
  if len(args) != 1:
    print('update_players requires 1 args')
    sys.exit(1)
  pp.pprint(client.update_players(eval(args[0]),))

elif cmd == 'attack':
  if len(args) != 1:
    print('attack requires 1 args')
    sys.exit(1)
  pp.pprint(client.attack(eval(args[0]),))

elif cmd == 'update_self':
  if len(args) != 1:
    print('update_self requires 1 args')
    sys.exit(1)
  pp.pprint(client.update_self(args[0],))

elif cmd == 'go_to_area':
  if len(args) != 2:
    print('go_to_area requires 2 args')
    sys.exit(1)
  pp.pprint(client.go_to_area(eval(args[0]),eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
